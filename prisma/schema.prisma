generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum AccountType {
  Seller
  Buyer
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?        @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  role           String         @default("USER")
  address        Address?
  products       Product[]
  orders         Order[]
  accounts       Account[]
  sessions       Session[]
  notifications  Notification[]
}

model Address {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  street     String
  city       String
  state      String
  postalCode String
  country    String
  phone      String
  userId     String @unique @db.ObjectId
  user       User   @relation(fields: [userId], references: [id])
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  description String?
  approved    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Product {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  price       Float
  images      String[]
  categoryId  String      @db.ObjectId
  sellerId    String      @db.ObjectId
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  category    Category    @relation(fields: [categoryId], references: [id])
  seller      User        @relation(fields: [sellerId], references: [id])
  orderItems  OrderItem[]
  keywords    String[]
  isActive    Boolean     @default(true)
}

enum OrderStatus {
  PENDING
  ACCEPTED
  REJECTED
  INPROGRESS
  COMPLETED
  CANCELED
}

model Order {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  userId       String        @db.ObjectId
  status       OrderStatus   @default(PENDING)
  total        Float
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id])
  orderItems   OrderItem[]
  notification Notification?
  address      String
  phone        String
  sellerOrder  SellerOrder?  @relation("OrderToSellerOrder") // no fields or references
}

model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String   @db.ObjectId
  productId String   @db.ObjectId
  quantity  Int
  price     Float
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SellerOrder {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sellerUserId String   @db.ObjectId
  orderId      String   @unique @db.ObjectId
  order        Order    @relation("OrderToSellerOrder", fields: [orderId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  orderId   String?  @unique @db.ObjectId
  type      String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  order     Order?   @relation(fields: [orderId], references: [id])
}
